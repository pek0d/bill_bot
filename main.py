import asyncio
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup
from dotenv import load_dotenv

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
months_ru = {
    1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
    5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
    9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN", "").strip()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
services = [
    "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ üè†üõÅüöΩ",
    "–¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç üõú",
    "–≤—ã–≤–æ–∑ –¢–ë–û üöõ",
    "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è üîå ‚ö°"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
def get_previous_month():
    current_month = datetime.now().month
    previous_month = current_month - 1 if current_month > 1 else 12
    return months_ru[previous_month]

# –ö–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å–∫" –∏ "–°—Ç–æ–ø"
start_stop_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–ø—É—Å–∫"), KeyboardButton(text="–°—Ç–æ–ø")]
    ],
    resize_keyboard=True
)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"step": 0, "values": [], "month": get_previous_month()}

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç!üëã\n–Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ üí∏ –∑–∞ **{user_data[chat_id]['month']}**.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É _'–°–¢–ê–†–¢'_ –¥–ª—è –Ω–∞—á–∞–ª–∞ ‚ñ∂Ô∏è",
        reply_markup=start_stop_keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å–∫"
@dp.message(lambda message: message.text == "–ó–∞–ø—É—Å–∫")
async def handle_start_button(message: Message):
    chat_id = message.chat.id

    if chat_id not in user_data:
        user_data[chat_id] = {"step": 0, "values": [], "month": get_previous_month()}

    await ask_next_service(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
@dp.message(lambda message: message.text == "–°—Ç–æ–ø")
async def handle_stop_button(message: Message):
    chat_id = message.chat.id

    if chat_id in user_data:
        del user_data[chat_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await message.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=start_stop_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–π —É—Å–ª—É–≥–∏
async def ask_next_service(message: Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]

    if step < len(services):
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å **{services[step]}** –∑–∞ **{user_data[chat_id]['month']}**:",
            parse_mode="Markdown"
        )
    else:
        total = sum(user_data[chat_id]["values"])
        await message.answer(
            f"–ö –æ–ø–ª–∞—Ç–µ üí∞(–≤—Å–µ–≥–æ üè†üõÅüöΩüöõüõúüîå) –∑–∞ **{user_data[chat_id]['month']}**: *{total} ‚ÇΩ*",
            parse_mode="Markdown"
        )
        del user_data[chat_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message()
async def process_input(message: Message):
    chat_id = message.chat.id

    if chat_id not in user_data:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        value = float(message.text)
        user_data[chat_id]["values"].append(value)
        user_data[chat_id]["step"] += 1
        await ask_next_service(message)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
